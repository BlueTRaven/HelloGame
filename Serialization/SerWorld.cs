// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SerWorld.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HelloGame {

  /// <summary>Holder for reflection information generated from SerWorld.proto</summary>
  public static partial class SerWorldReflection {

    #region Descriptor
    /// <summary>File descriptor for SerWorld.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SerWorldReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5TZXJXb3JsZC5wcm90bxIJSGVsbG9HYW1lIiIKClNlclZlY3RvcjISCQoB",
            "eBgBIAEoAhIJCgF5GAIgASgCIkMKDFNlclJlY3RhbmdsZRIJCgF4GAEgASgF",
            "EgkKAXkYAiABKAUSDQoFd2lkdGgYAyABKAUSDgoGaGVpZ2h0GAQgASgFIjYK",
            "CFNlckNvbG9yEgkKAVIYASABKA0SCQoBRxgCIAEoDRIJCgFCGAMgASgNEgkK",
            "AUEYBCABKA0ihQEKClNlclRleEluZm8SDAoEbmFtZRgBIAEoCRIkCgVzY2Fs",
            "ZRgCIAEoCzIVLkhlbGxvR2FtZS5TZXJWZWN0b3IyEiEKBHRpbnQYAyABKAsy",
            "Ey5IZWxsb0dhbWUuU2VyQ29sb3ISDgoGbWlycm9yGAQgASgFEhAKCHJvdGF0",
            "aW9uGAUgASgFIrcBChBTZXJFbnRpdHlTcGF3bmVyEikKCHBvc2l0aW9uGAEg",
            "ASgLMhcuSGVsbG9HYW1lLlNlclJlY3RhbmdsZRIMCgR0eXBlGAIgASgFEhsK",
            "E3NwYXduUmFuZG9tUG9zaXRpb24YAyABKAgSDQoFaW5mbzEYBCABKAkSDQoF",
            "aW5mbzIYBSABKAkSFQoNc3RhcnRSb3RhdGlvbhgGIAEoAhIYChBzdGFydE5v",
            "dGljZVN0YXRlGAcgASgFIoQBCghTZXJCcnVzaBIQCghkcmF3VHlwZRgBIAEo",
            "BRInCgZib3VuZHMYAiABKAsyFy5IZWxsb0dhbWUuU2VyUmVjdGFuZ2xlEioK",
            "C3RleHR1cmVJbmZvGAMgASgLMhUuSGVsbG9HYW1lLlNlclRleEluZm8SEQoJ",
            "ZHJhd0RlcHRoGAQgASgFIjIKB1NlcldhbGwSJwoGYm91bmRzGAEgASgLMhcu",
            "SGVsbG9HYW1lLlNlclJlY3RhbmdsZSJvCgdTZXJQcm9wEicKCHBvc2l0aW9u",
            "GAEgASgLMhUuSGVsbG9HYW1lLlNlclZlY3RvcjISJgoHdGV4SW5mbxgCIAEo",
            "CzIVLkhlbGxvR2FtZS5TZXJUZXhJbmZvEhMKC3NoYWRvd1NjYWxlGAMgASgC",
            "ImQKClNlclRyaWdnZXISJwoGYm91bmRzGAEgASgLMhcuSGVsbG9HYW1lLlNl",
            "clJlY3RhbmdsZRIPCgdjb21tYW5kGAIgASgJEg0KBWluZm8xGAMgASgJEg0K",
            "BWluZm8yGAQgASgJIpcCCghTZXJXb3JsZBIkCgdicnVzaGVzGAEgAygLMhMu",
            "SGVsbG9HYW1lLlNlckJydXNoEiEKBXdhbGxzGAIgAygLMhIuSGVsbG9HYW1l",
            "LlNlcldhbGwSIQoFcHJvcHMYAyADKAsyEi5IZWxsb0dhbWUuU2VyUHJvcBIz",
            "Cg5lbnRpdHlTcGF3bmVycxgEIAMoCzIbLkhlbGxvR2FtZS5TZXJFbnRpdHlT",
            "cGF3bmVyEicKCHRyaWdnZXJzGAUgAygLMhUuSGVsbG9HYW1lLlNlclRyaWdn",
            "ZXISEwoLZGlzcGxheU5hbWUYBiABKAkSLAoPYmFja2dyb3VuZENvbG9yGAcg",
            "ASgLMhMuSGVsbG9HYW1lLlNlckNvbG9yYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HelloGame.SerVector2), global::HelloGame.SerVector2.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HelloGame.SerRectangle), global::HelloGame.SerRectangle.Parser, new[]{ "X", "Y", "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HelloGame.SerColor), global::HelloGame.SerColor.Parser, new[]{ "R", "G", "B", "A" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HelloGame.SerTexInfo), global::HelloGame.SerTexInfo.Parser, new[]{ "Name", "Scale", "Tint", "Mirror", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HelloGame.SerEntitySpawner), global::HelloGame.SerEntitySpawner.Parser, new[]{ "Position", "Type", "SpawnRandomPosition", "Info1", "Info2", "StartRotation", "StartNoticeState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HelloGame.SerBrush), global::HelloGame.SerBrush.Parser, new[]{ "DrawType", "Bounds", "TextureInfo", "DrawDepth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HelloGame.SerWall), global::HelloGame.SerWall.Parser, new[]{ "Bounds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HelloGame.SerProp), global::HelloGame.SerProp.Parser, new[]{ "Position", "TexInfo", "ShadowScale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HelloGame.SerTrigger), global::HelloGame.SerTrigger.Parser, new[]{ "Bounds", "Command", "Info1", "Info2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HelloGame.SerWorld), global::HelloGame.SerWorld.Parser, new[]{ "Brushes", "Walls", "Props", "EntitySpawners", "Triggers", "DisplayName", "BackgroundColor" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SerVector2 : pb::IMessage<SerVector2> {
    private static readonly pb::MessageParser<SerVector2> _parser = new pb::MessageParser<SerVector2>(() => new SerVector2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HelloGame.SerWorldReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerVector2(SerVector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerVector2 Clone() {
      return new SerVector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerVector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerRectangle : pb::IMessage<SerRectangle> {
    private static readonly pb::MessageParser<SerRectangle> _parser = new pb::MessageParser<SerRectangle>(() => new SerRectangle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerRectangle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HelloGame.SerWorldReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerRectangle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerRectangle(SerRectangle other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerRectangle Clone() {
      return new SerRectangle(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerRectangle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerRectangle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerRectangle other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerColor : pb::IMessage<SerColor> {
    private static readonly pb::MessageParser<SerColor> _parser = new pb::MessageParser<SerColor>(() => new SerColor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HelloGame.SerWorldReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerColor(SerColor other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      a_ = other.a_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerColor Clone() {
      return new SerColor(this);
    }

    /// <summary>Field number for the "R" field.</summary>
    public const int RFieldNumber = 1;
    private uint r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "G" field.</summary>
    public const int GFieldNumber = 2;
    private uint g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 3;
    private uint b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "A" field.</summary>
    public const int AFieldNumber = 4;
    private uint a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      if (A != other.A) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (A != 0) hash ^= A.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(B);
      }
      if (A != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(A);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
      }
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(A);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerColor other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
      if (other.A != 0) {
        A = other.A;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            R = input.ReadUInt32();
            break;
          }
          case 16: {
            G = input.ReadUInt32();
            break;
          }
          case 24: {
            B = input.ReadUInt32();
            break;
          }
          case 32: {
            A = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerTexInfo : pb::IMessage<SerTexInfo> {
    private static readonly pb::MessageParser<SerTexInfo> _parser = new pb::MessageParser<SerTexInfo>(() => new SerTexInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerTexInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HelloGame.SerWorldReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTexInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTexInfo(SerTexInfo other) : this() {
      name_ = other.name_;
      Scale = other.scale_ != null ? other.Scale.Clone() : null;
      Tint = other.tint_ != null ? other.Tint.Clone() : null;
      mirror_ = other.mirror_;
      rotation_ = other.rotation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTexInfo Clone() {
      return new SerTexInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private global::HelloGame.SerVector2 scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HelloGame.SerVector2 Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "tint" field.</summary>
    public const int TintFieldNumber = 3;
    private global::HelloGame.SerColor tint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HelloGame.SerColor Tint {
      get { return tint_; }
      set {
        tint_ = value;
      }
    }

    /// <summary>Field number for the "mirror" field.</summary>
    public const int MirrorFieldNumber = 4;
    private int mirror_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mirror {
      get { return mirror_; }
      set {
        mirror_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private int rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerTexInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerTexInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Tint, other.Tint)) return false;
      if (Mirror != other.Mirror) return false;
      if (Rotation != other.Rotation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (tint_ != null) hash ^= Tint.GetHashCode();
      if (Mirror != 0) hash ^= Mirror.GetHashCode();
      if (Rotation != 0) hash ^= Rotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (scale_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scale);
      }
      if (tint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Tint);
      }
      if (Mirror != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mirror);
      }
      if (Rotation != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (tint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tint);
      }
      if (Mirror != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mirror);
      }
      if (Rotation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rotation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerTexInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          scale_ = new global::HelloGame.SerVector2();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.tint_ != null) {
        if (tint_ == null) {
          tint_ = new global::HelloGame.SerColor();
        }
        Tint.MergeFrom(other.Tint);
      }
      if (other.Mirror != 0) {
        Mirror = other.Mirror;
      }
      if (other.Rotation != 0) {
        Rotation = other.Rotation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (scale_ == null) {
              scale_ = new global::HelloGame.SerVector2();
            }
            input.ReadMessage(scale_);
            break;
          }
          case 26: {
            if (tint_ == null) {
              tint_ = new global::HelloGame.SerColor();
            }
            input.ReadMessage(tint_);
            break;
          }
          case 32: {
            Mirror = input.ReadInt32();
            break;
          }
          case 40: {
            Rotation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerEntitySpawner : pb::IMessage<SerEntitySpawner> {
    private static readonly pb::MessageParser<SerEntitySpawner> _parser = new pb::MessageParser<SerEntitySpawner>(() => new SerEntitySpawner());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerEntitySpawner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HelloGame.SerWorldReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerEntitySpawner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerEntitySpawner(SerEntitySpawner other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      type_ = other.type_;
      spawnRandomPosition_ = other.spawnRandomPosition_;
      info1_ = other.info1_;
      info2_ = other.info2_;
      startRotation_ = other.startRotation_;
      startNoticeState_ = other.startNoticeState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerEntitySpawner Clone() {
      return new SerEntitySpawner(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::HelloGame.SerRectangle position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HelloGame.SerRectangle Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "spawnRandomPosition" field.</summary>
    public const int SpawnRandomPositionFieldNumber = 3;
    private bool spawnRandomPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpawnRandomPosition {
      get { return spawnRandomPosition_; }
      set {
        spawnRandomPosition_ = value;
      }
    }

    /// <summary>Field number for the "info1" field.</summary>
    public const int Info1FieldNumber = 4;
    private string info1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info1 {
      get { return info1_; }
      set {
        info1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info2" field.</summary>
    public const int Info2FieldNumber = 5;
    private string info2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info2 {
      get { return info2_; }
      set {
        info2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startRotation" field.</summary>
    public const int StartRotationFieldNumber = 6;
    private float startRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartRotation {
      get { return startRotation_; }
      set {
        startRotation_ = value;
      }
    }

    /// <summary>Field number for the "startNoticeState" field.</summary>
    public const int StartNoticeStateFieldNumber = 7;
    private int startNoticeState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartNoticeState {
      get { return startNoticeState_; }
      set {
        startNoticeState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerEntitySpawner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerEntitySpawner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (Type != other.Type) return false;
      if (SpawnRandomPosition != other.SpawnRandomPosition) return false;
      if (Info1 != other.Info1) return false;
      if (Info2 != other.Info2) return false;
      if (StartRotation != other.StartRotation) return false;
      if (StartNoticeState != other.StartNoticeState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SpawnRandomPosition != false) hash ^= SpawnRandomPosition.GetHashCode();
      if (Info1.Length != 0) hash ^= Info1.GetHashCode();
      if (Info2.Length != 0) hash ^= Info2.GetHashCode();
      if (StartRotation != 0F) hash ^= StartRotation.GetHashCode();
      if (StartNoticeState != 0) hash ^= StartNoticeState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (SpawnRandomPosition != false) {
        output.WriteRawTag(24);
        output.WriteBool(SpawnRandomPosition);
      }
      if (Info1.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Info1);
      }
      if (Info2.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Info2);
      }
      if (StartRotation != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StartRotation);
      }
      if (StartNoticeState != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StartNoticeState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (SpawnRandomPosition != false) {
        size += 1 + 1;
      }
      if (Info1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info1);
      }
      if (Info2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info2);
      }
      if (StartRotation != 0F) {
        size += 1 + 4;
      }
      if (StartNoticeState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartNoticeState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerEntitySpawner other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::HelloGame.SerRectangle();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SpawnRandomPosition != false) {
        SpawnRandomPosition = other.SpawnRandomPosition;
      }
      if (other.Info1.Length != 0) {
        Info1 = other.Info1;
      }
      if (other.Info2.Length != 0) {
        Info2 = other.Info2;
      }
      if (other.StartRotation != 0F) {
        StartRotation = other.StartRotation;
      }
      if (other.StartNoticeState != 0) {
        StartNoticeState = other.StartNoticeState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::HelloGame.SerRectangle();
            }
            input.ReadMessage(position_);
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            SpawnRandomPosition = input.ReadBool();
            break;
          }
          case 34: {
            Info1 = input.ReadString();
            break;
          }
          case 42: {
            Info2 = input.ReadString();
            break;
          }
          case 53: {
            StartRotation = input.ReadFloat();
            break;
          }
          case 56: {
            StartNoticeState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerBrush : pb::IMessage<SerBrush> {
    private static readonly pb::MessageParser<SerBrush> _parser = new pb::MessageParser<SerBrush>(() => new SerBrush());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerBrush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HelloGame.SerWorldReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerBrush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerBrush(SerBrush other) : this() {
      drawType_ = other.drawType_;
      Bounds = other.bounds_ != null ? other.Bounds.Clone() : null;
      TextureInfo = other.textureInfo_ != null ? other.TextureInfo.Clone() : null;
      drawDepth_ = other.drawDepth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerBrush Clone() {
      return new SerBrush(this);
    }

    /// <summary>Field number for the "drawType" field.</summary>
    public const int DrawTypeFieldNumber = 1;
    private int drawType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawType {
      get { return drawType_; }
      set {
        drawType_ = value;
      }
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 2;
    private global::HelloGame.SerRectangle bounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HelloGame.SerRectangle Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    /// <summary>Field number for the "textureInfo" field.</summary>
    public const int TextureInfoFieldNumber = 3;
    private global::HelloGame.SerTexInfo textureInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HelloGame.SerTexInfo TextureInfo {
      get { return textureInfo_; }
      set {
        textureInfo_ = value;
      }
    }

    /// <summary>Field number for the "drawDepth" field.</summary>
    public const int DrawDepthFieldNumber = 4;
    private int drawDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawDepth {
      get { return drawDepth_; }
      set {
        drawDepth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerBrush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerBrush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DrawType != other.DrawType) return false;
      if (!object.Equals(Bounds, other.Bounds)) return false;
      if (!object.Equals(TextureInfo, other.TextureInfo)) return false;
      if (DrawDepth != other.DrawDepth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DrawType != 0) hash ^= DrawType.GetHashCode();
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      if (textureInfo_ != null) hash ^= TextureInfo.GetHashCode();
      if (DrawDepth != 0) hash ^= DrawDepth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DrawType);
      }
      if (bounds_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bounds);
      }
      if (textureInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TextureInfo);
      }
      if (DrawDepth != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DrawDepth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawType);
      }
      if (bounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      if (textureInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextureInfo);
      }
      if (DrawDepth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawDepth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerBrush other) {
      if (other == null) {
        return;
      }
      if (other.DrawType != 0) {
        DrawType = other.DrawType;
      }
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          bounds_ = new global::HelloGame.SerRectangle();
        }
        Bounds.MergeFrom(other.Bounds);
      }
      if (other.textureInfo_ != null) {
        if (textureInfo_ == null) {
          textureInfo_ = new global::HelloGame.SerTexInfo();
        }
        TextureInfo.MergeFrom(other.TextureInfo);
      }
      if (other.DrawDepth != 0) {
        DrawDepth = other.DrawDepth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DrawType = input.ReadInt32();
            break;
          }
          case 18: {
            if (bounds_ == null) {
              bounds_ = new global::HelloGame.SerRectangle();
            }
            input.ReadMessage(bounds_);
            break;
          }
          case 26: {
            if (textureInfo_ == null) {
              textureInfo_ = new global::HelloGame.SerTexInfo();
            }
            input.ReadMessage(textureInfo_);
            break;
          }
          case 32: {
            DrawDepth = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerWall : pb::IMessage<SerWall> {
    private static readonly pb::MessageParser<SerWall> _parser = new pb::MessageParser<SerWall>(() => new SerWall());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerWall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HelloGame.SerWorldReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerWall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerWall(SerWall other) : this() {
      Bounds = other.bounds_ != null ? other.Bounds.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerWall Clone() {
      return new SerWall(this);
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 1;
    private global::HelloGame.SerRectangle bounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HelloGame.SerRectangle Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerWall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerWall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bounds, other.Bounds)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bounds_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bounds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerWall other) {
      if (other == null) {
        return;
      }
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          bounds_ = new global::HelloGame.SerRectangle();
        }
        Bounds.MergeFrom(other.Bounds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bounds_ == null) {
              bounds_ = new global::HelloGame.SerRectangle();
            }
            input.ReadMessage(bounds_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerProp : pb::IMessage<SerProp> {
    private static readonly pb::MessageParser<SerProp> _parser = new pb::MessageParser<SerProp>(() => new SerProp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerProp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HelloGame.SerWorldReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerProp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerProp(SerProp other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      TexInfo = other.texInfo_ != null ? other.TexInfo.Clone() : null;
      shadowScale_ = other.shadowScale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerProp Clone() {
      return new SerProp(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::HelloGame.SerVector2 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HelloGame.SerVector2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "texInfo" field.</summary>
    public const int TexInfoFieldNumber = 2;
    private global::HelloGame.SerTexInfo texInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HelloGame.SerTexInfo TexInfo {
      get { return texInfo_; }
      set {
        texInfo_ = value;
      }
    }

    /// <summary>Field number for the "shadowScale" field.</summary>
    public const int ShadowScaleFieldNumber = 3;
    private float shadowScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShadowScale {
      get { return shadowScale_; }
      set {
        shadowScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerProp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerProp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(TexInfo, other.TexInfo)) return false;
      if (ShadowScale != other.ShadowScale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (texInfo_ != null) hash ^= TexInfo.GetHashCode();
      if (ShadowScale != 0F) hash ^= ShadowScale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (texInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TexInfo);
      }
      if (ShadowScale != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ShadowScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (texInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TexInfo);
      }
      if (ShadowScale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerProp other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::HelloGame.SerVector2();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.texInfo_ != null) {
        if (texInfo_ == null) {
          texInfo_ = new global::HelloGame.SerTexInfo();
        }
        TexInfo.MergeFrom(other.TexInfo);
      }
      if (other.ShadowScale != 0F) {
        ShadowScale = other.ShadowScale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::HelloGame.SerVector2();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (texInfo_ == null) {
              texInfo_ = new global::HelloGame.SerTexInfo();
            }
            input.ReadMessage(texInfo_);
            break;
          }
          case 29: {
            ShadowScale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerTrigger : pb::IMessage<SerTrigger> {
    private static readonly pb::MessageParser<SerTrigger> _parser = new pb::MessageParser<SerTrigger>(() => new SerTrigger());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HelloGame.SerWorldReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTrigger(SerTrigger other) : this() {
      Bounds = other.bounds_ != null ? other.Bounds.Clone() : null;
      command_ = other.command_;
      info1_ = other.info1_;
      info2_ = other.info2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerTrigger Clone() {
      return new SerTrigger(this);
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 1;
    private global::HelloGame.SerRectangle bounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HelloGame.SerRectangle Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private string command_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info1" field.</summary>
    public const int Info1FieldNumber = 3;
    private string info1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info1 {
      get { return info1_; }
      set {
        info1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info2" field.</summary>
    public const int Info2FieldNumber = 4;
    private string info2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info2 {
      get { return info2_; }
      set {
        info2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bounds, other.Bounds)) return false;
      if (Command != other.Command) return false;
      if (Info1 != other.Info1) return false;
      if (Info2 != other.Info2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      if (Info1.Length != 0) hash ^= Info1.GetHashCode();
      if (Info2.Length != 0) hash ^= Info2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bounds_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bounds);
      }
      if (Command.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Command);
      }
      if (Info1.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Info1);
      }
      if (Info2.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Info2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
      }
      if (Info1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info1);
      }
      if (Info2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerTrigger other) {
      if (other == null) {
        return;
      }
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          bounds_ = new global::HelloGame.SerRectangle();
        }
        Bounds.MergeFrom(other.Bounds);
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
      if (other.Info1.Length != 0) {
        Info1 = other.Info1;
      }
      if (other.Info2.Length != 0) {
        Info2 = other.Info2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bounds_ == null) {
              bounds_ = new global::HelloGame.SerRectangle();
            }
            input.ReadMessage(bounds_);
            break;
          }
          case 18: {
            Command = input.ReadString();
            break;
          }
          case 26: {
            Info1 = input.ReadString();
            break;
          }
          case 34: {
            Info2 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SerWorld : pb::IMessage<SerWorld> {
    private static readonly pb::MessageParser<SerWorld> _parser = new pb::MessageParser<SerWorld>(() => new SerWorld());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerWorld> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HelloGame.SerWorldReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerWorld() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerWorld(SerWorld other) : this() {
      brushes_ = other.brushes_.Clone();
      walls_ = other.walls_.Clone();
      props_ = other.props_.Clone();
      entitySpawners_ = other.entitySpawners_.Clone();
      triggers_ = other.triggers_.Clone();
      displayName_ = other.displayName_;
      BackgroundColor = other.backgroundColor_ != null ? other.BackgroundColor.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerWorld Clone() {
      return new SerWorld(this);
    }

    /// <summary>Field number for the "brushes" field.</summary>
    public const int BrushesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HelloGame.SerBrush> _repeated_brushes_codec
        = pb::FieldCodec.ForMessage(10, global::HelloGame.SerBrush.Parser);
    private readonly pbc::RepeatedField<global::HelloGame.SerBrush> brushes_ = new pbc::RepeatedField<global::HelloGame.SerBrush>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HelloGame.SerBrush> Brushes {
      get { return brushes_; }
    }

    /// <summary>Field number for the "walls" field.</summary>
    public const int WallsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::HelloGame.SerWall> _repeated_walls_codec
        = pb::FieldCodec.ForMessage(18, global::HelloGame.SerWall.Parser);
    private readonly pbc::RepeatedField<global::HelloGame.SerWall> walls_ = new pbc::RepeatedField<global::HelloGame.SerWall>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HelloGame.SerWall> Walls {
      get { return walls_; }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::HelloGame.SerProp> _repeated_props_codec
        = pb::FieldCodec.ForMessage(26, global::HelloGame.SerProp.Parser);
    private readonly pbc::RepeatedField<global::HelloGame.SerProp> props_ = new pbc::RepeatedField<global::HelloGame.SerProp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HelloGame.SerProp> Props {
      get { return props_; }
    }

    /// <summary>Field number for the "entitySpawners" field.</summary>
    public const int EntitySpawnersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::HelloGame.SerEntitySpawner> _repeated_entitySpawners_codec
        = pb::FieldCodec.ForMessage(34, global::HelloGame.SerEntitySpawner.Parser);
    private readonly pbc::RepeatedField<global::HelloGame.SerEntitySpawner> entitySpawners_ = new pbc::RepeatedField<global::HelloGame.SerEntitySpawner>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HelloGame.SerEntitySpawner> EntitySpawners {
      get { return entitySpawners_; }
    }

    /// <summary>Field number for the "triggers" field.</summary>
    public const int TriggersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::HelloGame.SerTrigger> _repeated_triggers_codec
        = pb::FieldCodec.ForMessage(42, global::HelloGame.SerTrigger.Parser);
    private readonly pbc::RepeatedField<global::HelloGame.SerTrigger> triggers_ = new pbc::RepeatedField<global::HelloGame.SerTrigger>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HelloGame.SerTrigger> Triggers {
      get { return triggers_; }
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 6;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backgroundColor" field.</summary>
    public const int BackgroundColorFieldNumber = 7;
    private global::HelloGame.SerColor backgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::HelloGame.SerColor BackgroundColor {
      get { return backgroundColor_; }
      set {
        backgroundColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerWorld);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerWorld other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!brushes_.Equals(other.brushes_)) return false;
      if(!walls_.Equals(other.walls_)) return false;
      if(!props_.Equals(other.props_)) return false;
      if(!entitySpawners_.Equals(other.entitySpawners_)) return false;
      if(!triggers_.Equals(other.triggers_)) return false;
      if (DisplayName != other.DisplayName) return false;
      if (!object.Equals(BackgroundColor, other.BackgroundColor)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= brushes_.GetHashCode();
      hash ^= walls_.GetHashCode();
      hash ^= props_.GetHashCode();
      hash ^= entitySpawners_.GetHashCode();
      hash ^= triggers_.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (backgroundColor_ != null) hash ^= BackgroundColor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      brushes_.WriteTo(output, _repeated_brushes_codec);
      walls_.WriteTo(output, _repeated_walls_codec);
      props_.WriteTo(output, _repeated_props_codec);
      entitySpawners_.WriteTo(output, _repeated_entitySpawners_codec);
      triggers_.WriteTo(output, _repeated_triggers_codec);
      if (DisplayName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DisplayName);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BackgroundColor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += brushes_.CalculateSize(_repeated_brushes_codec);
      size += walls_.CalculateSize(_repeated_walls_codec);
      size += props_.CalculateSize(_repeated_props_codec);
      size += entitySpawners_.CalculateSize(_repeated_entitySpawners_codec);
      size += triggers_.CalculateSize(_repeated_triggers_codec);
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (backgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundColor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerWorld other) {
      if (other == null) {
        return;
      }
      brushes_.Add(other.brushes_);
      walls_.Add(other.walls_);
      props_.Add(other.props_);
      entitySpawners_.Add(other.entitySpawners_);
      triggers_.Add(other.triggers_);
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.backgroundColor_ != null) {
        if (backgroundColor_ == null) {
          backgroundColor_ = new global::HelloGame.SerColor();
        }
        BackgroundColor.MergeFrom(other.BackgroundColor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            brushes_.AddEntriesFrom(input, _repeated_brushes_codec);
            break;
          }
          case 18: {
            walls_.AddEntriesFrom(input, _repeated_walls_codec);
            break;
          }
          case 26: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
          case 34: {
            entitySpawners_.AddEntriesFrom(input, _repeated_entitySpawners_codec);
            break;
          }
          case 42: {
            triggers_.AddEntriesFrom(input, _repeated_triggers_codec);
            break;
          }
          case 50: {
            DisplayName = input.ReadString();
            break;
          }
          case 58: {
            if (backgroundColor_ == null) {
              backgroundColor_ = new global::HelloGame.SerColor();
            }
            input.ReadMessage(backgroundColor_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
