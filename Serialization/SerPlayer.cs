// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SerPlayer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HelloGame {

  /// <summary>Holder for reflection information generated from SerPlayer.proto</summary>
  public static partial class SerPlayerReflection {

    #region Descriptor
    /// <summary>File descriptor for SerPlayer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SerPlayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9TZXJQbGF5ZXIucHJvdG8SCUhlbGxvR2FtZSJSCglTZXJQbGF5ZXISDgoG",
            "aGVhbHRoGAEgASgFEhUKDWVudHJhbmNlUG9pbnQYAiABKAUSDwoHbWFwTmFt",
            "ZRgDIAEoCRINCgVraWxscxgEIAMoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HelloGame.SerPlayer), global::HelloGame.SerPlayer.Parser, new[]{ "Health", "EntrancePoint", "MapName", "Kills" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SerPlayer : pb::IMessage<SerPlayer> {
    private static readonly pb::MessageParser<SerPlayer> _parser = new pb::MessageParser<SerPlayer>(() => new SerPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SerPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HelloGame.SerPlayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPlayer(SerPlayer other) : this() {
      health_ = other.health_;
      entrancePoint_ = other.entrancePoint_;
      mapName_ = other.mapName_;
      kills_ = other.kills_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SerPlayer Clone() {
      return new SerPlayer(this);
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 1;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "entrancePoint" field.</summary>
    public const int EntrancePointFieldNumber = 2;
    private int entrancePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntrancePoint {
      get { return entrancePoint_; }
      set {
        entrancePoint_ = value;
      }
    }

    /// <summary>Field number for the "mapName" field.</summary>
    public const int MapNameFieldNumber = 3;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kills" field.</summary>
    public const int KillsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_kills_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> kills_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Kills {
      get { return kills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SerPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SerPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Health != other.Health) return false;
      if (EntrancePoint != other.EntrancePoint) return false;
      if (MapName != other.MapName) return false;
      if(!kills_.Equals(other.kills_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Health != 0) hash ^= Health.GetHashCode();
      if (EntrancePoint != 0) hash ^= EntrancePoint.GetHashCode();
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      hash ^= kills_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Health != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Health);
      }
      if (EntrancePoint != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EntrancePoint);
      }
      if (MapName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MapName);
      }
      kills_.WriteTo(output, _repeated_kills_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (EntrancePoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntrancePoint);
      }
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      size += kills_.CalculateSize(_repeated_kills_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SerPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.EntrancePoint != 0) {
        EntrancePoint = other.EntrancePoint;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      kills_.Add(other.kills_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Health = input.ReadInt32();
            break;
          }
          case 16: {
            EntrancePoint = input.ReadInt32();
            break;
          }
          case 26: {
            MapName = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            kills_.AddEntriesFrom(input, _repeated_kills_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
